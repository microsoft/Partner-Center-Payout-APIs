// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System.Net.Http;
using System.Net.Http.Headers;

namespace PartnerCenterPayoutAPIsSampleCode
{
    /// <summary>
    /// Contains actions or methods that can be performed related to Partner Center Payout - Payments.
    /// </summary>
    public class Payments
    {
        private static HttpClient PaymentClient = new HttpClient();
        private const string Domain = "https://api.partner.microsoft.com/";
        private const string BasePath = "v1.0/payouts/";
        private const string Resource = "payments";

        /// <summary>
        /// Creates a new Partner Center Payout Payments request.
        /// </summary>
        /// <param name="accessToken">AAD token generated by the UserCredentialTokenGenerator</param>
        /// <returns>Standard Http Response from the API</returns>
        public static HttpResponseMessage CreateRequest(string accessToken)
        {
            // Add your odata filter string below if any. 
            // SUPPORTED $filter fields are - payoutStatusUpdateTS, enrollmentParticipantId, programName, payoutOrderType, paymentId
            // Example filter string - "?$filter=payoutStatusUpdateTS le 2019-09-25T23:11:55.647Z and (enrollmentParticipantId eq 'XXXXXXX') and (programName eq 'CSP Direct Bill Partner') and (payoutOrderType eq 'REBATE') and (paymentId eq '000000000000')";

            const string filterString = "";
            var createPaymentsRequestUri = $"{Domain}{BasePath}{Resource}{filterString}"; 

            var requestMessage = new HttpRequestMessage(HttpMethod.Post, createPaymentsRequestUri);
            requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var response = PaymentClient.SendAsync(requestMessage).Result;

            return response;
        }

        /// <summary>
        /// Gets the status of an existing Partner Center Payout Payments request.
        /// </summary>
        /// <param name="accessToken">AAD token generated by the UserCredentialTokenGenerator</param>
        /// <param name="requestId">requestId</param>
        /// <returns>Standard Http Response from the API</returns>
        public static HttpResponseMessage GetRequest(string accessToken, string requestId)
        {
            var paymentsStatusUrl = $"{Domain}{BasePath}{Resource}/{requestId}"; 

            HttpRequestMessage requestMessage = new HttpRequestMessage(HttpMethod.Get, paymentsStatusUrl);
            requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            HttpResponseMessage response = PaymentClient.SendAsync(requestMessage).Result;

            return response;
        }

        /// <summary>
        /// Deletes an existing Partner Center Payout Payments request.
        /// </summary>
        /// <param name="accessToken">AAD token generated by the UserCredentialTokenGenerator</param>
        /// <param name="requestId">requestId</param>
        /// <returns>Standard Http Response from the API</returns>
        public static HttpResponseMessage DeleteRequest(string accessToken, string requestId)
        {
            var deletePaymentsRequestUri = Domain + BasePath + Resource + "/" + requestId;

            var requestMessage = new HttpRequestMessage(HttpMethod.Delete, deletePaymentsRequestUri);
            requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var response = PaymentClient.SendAsync(requestMessage).Result;

            return response;
        }
    }
}